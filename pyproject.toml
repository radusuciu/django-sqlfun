[project]
name = "django-sqlfun"
version = "0.0.2"
description = "Django app that lets you define custom SQL functions"
authors = [
    {name = "Radu Suciu"},
]
dependencies = [
    "django>=3.2,<5.0",
    "sqlparse>=0.4.3",
]
requires-python = ">=3.9"
readme = "README.md"
license = {text = "MIT"}
keywords = [
    "django",
    "database",
    "sql-functions",
    "custom-sql",
]
classifiers = [
  "Framework :: Django",
  "Framework :: Django :: 3.2",
  "Framework :: Django :: 4.0",
  "Framework :: Django :: 4.1",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Database",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

[build-system]
requires = ["pdm-pep517>=1.0"]
build-backend = "pdm.pep517.api"

[tool.pdm]
[tool.pdm.dev-dependencies]
dev = [
    "pytest>=7.2.2",
    "django>=3.2,<5.0",
    "pytest-django>=4.5.2",
    "psycopg2>=2.9.5",
    "pytest-docker-compose>=3.2.1",
    "ruff>=0.0.259",
    "black>=23.1.0",
    "types-mock>=5.0.0.5",
    "bumpver>=2022.1120",
]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.git-cliff.changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.
The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [Unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[tool.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^.*: add", group = "Added"},
    { message = "^.*: support", group = "Added"},
    { message = "^.*: remove", group = "Removed"},
    { message = "^.*: delete", group = "Removed"},
    { message = "^test", group = "Fixed"},
    { message = "^fix", group = "Fixed"},
    { message = "^.*: fix", group = "Fixed"},
    { message = "^.*", group = "Changed"},
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = true
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"

[tool.bumpver]
current_version = "0.0.2"
version_pattern = "MAJOR.MINOR.PATCH"
commit_message = "bump version {old_version} -> {new_version}"
commit = true
tag = true
push = false

[tool.bumpver.file_patterns]
"pyproject.toml" = [
    'current_version = "{version}"',
    'version = "{version}"',
]
